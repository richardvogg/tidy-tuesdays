image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
image_threshold("40%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(2) %>%
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
mews_borders %>%
filter(value==255) %>% nrow()
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
image_threshold("35%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(2) %>%
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
mews <- mews_borders %>%
filter(value==255) %>%
select(x,y)
library(metamer)
dino <- datasaurus %>% filter(dataset=="dino") %>% select(x,y)
final_mews <- draw_data(mews) %>% select(x,y)
plot(final_mews)
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
perturbation=0.08,
N=10000,trim=500)
metamer[[500]]
plot(metamer[[500]])
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
perturbation=0.08,
N=50000,trim=1000)
plot(metamer[[1000]])
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
N=50000,trim=1000)
metamer[[1000]]
plot(metamer[[1000]])
plot(dino)
plot(metamer[[1000]])
plot(mews)
plot(mews[sample(1:1311,142),])
plot(metamer[[1000]])
mean(metamer[[1000]]$x)
mean(dino$x)
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
N=100000,trim=5000)
plot(metamer[[5000]])
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
N=5000,trim=5000)
metamer[[5000]]
metamer[[1499]]
metamer[[1500]]
plot(metamer[[1499]])
plot(metamer[[1000]])
plot(metamer[[200]])
?metamerize
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
N=100000,trim=5,annealing=FALSE)
plot(metamer[[5]])
plot(metamer[[4]])
plot(metamer[[3]])
plot(metamer[[2]])
plot(metamer[[1]])
plot(metamer[[5]])
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
N=100000,trim=10000)
plot(metamer[[10000]])
library(gganimate)
metamer %>%
as.data.frame() %>%
ggplot(aes(x, y)) +
geom_point() +
transition_manual(.metamer)
datasaurus %>%
filter(dataset=="dino") %>%
ggplot(aes(x=x,y=y))+geom_point(aes(col=dataset))
datasaurus %>%
filter(dataset=="dino") %>%
ggplot(aes(x=x,y=y))+geom_point()
metamer[[10000]] %>%
ggplot(aes(x,y))+geom_point()
metamer[[9000]] %>%
ggplot(aes(x,y))+geom_point()
metamer[[9000]] %>%
ggplot(aes(x,y))+geom_point()+
labs(subtitle=cor(x,y))
metamer[[10000]] %>%
rbind(metamer[[9999]]) %>%
ggplot(aes(x,y))+geom_point()+
labs(subtitle=cor(x,y))
metamer[[10000]] %>%
rbind(metamer[[9999]]) %>% View()
metamer[[10000]] %>%
rbind(metamer[[9999]]) %>%
ggplot(aes(x,y))+geom_point()+
labs(subtitle=cor(x,y))
metamer[[10000]] %>%
rbind(metamer[[9999]]) %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(mews),
N=500000,trim=10000)
plot(metamer[[10000]])
mean(metamer[[10000]]$x)
mean(dino$x)
mean(metamer[[10000]]$y)
mean(dino$y)
sd(metamer[[10000]]$x)
sd(dino$x)
sd(metamer[[10000]]$y)
sd(dino$y)
cor(metamer[[10000]]$x,metamer[[10000]]$y)
cor(dino$x,dino$y)
metamer[[10000]] %>%
ggplot(aes(x,y))+geom_point()
library(tidyverse)
library(metamer)
library(magick)
tuesdata <- tidytuesdayR::tt_load(2020, week = 42)
datasaurus <- tuesdata$datasaurus
mews <- image_read("Week 42 - datasauRus/Mews2.jpg")
#convolution filters to detect edges
edge <- matrix(c(0,1,0, 1,-4,1, 0,1,0), 3, 3)
sharpen  = matrix(c(0,-1,0, -1,8,-1, 0,-1,0),3, 3)
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("35%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(2) %>%
#crop to the head of the cat
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
#transform into tidy dataframe
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
#Plot Mews (not yet equal to datasaurus)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("25%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(2) %>%
#crop to the head of the cat
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
#transform into tidy dataframe
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
#Plot Mews (not yet equal to datasaurus)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("15%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(2) %>%
#crop to the head of the cat
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
#transform into tidy dataframe
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
#Plot Mews (not yet equal to datasaurus)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("10%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(2) %>%
#crop to the head of the cat
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
#transform into tidy dataframe
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
#Plot Mews (not yet equal to datasaurus)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
#convolution filters to detect edges
edge <- matrix(c(0,1,0, 1,-4,1, 0,1,0), 3, 3)
sharpen  = matrix(c(0,-1,0, -1,4,-1, 0,-1,0),3, 3)
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_convolve(edge) %>5 plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_convolve(edge) %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_convolve(edge) %>%
image_threshold("10%",type="white") %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_convolve(edge) %>%
image_threshold("25%",type="white") %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("25%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
image_median(3) %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("25%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("20%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>% plot()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("20%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
#crop to the head of the cat
image_crop("140x140+60+25") %>%
image_scale("100x100!") %>%
#transform into tidy dataframe
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
#Plot Mews (not yet equal to datasaurus)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
#Image processing
mews_borders <- mews %>%
image_quantize(colorspace="gray") %>%
image_convolve(edge) %>%
image_convolve(sharpen) %>%
image_threshold("20%",type="white") %>%
image_threshold("100%",type="black") %>%
image_median(2) %>%
#crop to the head of the cat
image_crop("140x140+60+25") %>%
#transform into tidy dataframe
image_data() %>%
as.integer() %>%
{.[,,1]} %>%
as.data.frame() %>%
mutate(y=row_number()) %>%
pivot_longer(-y,names_to="x") %>%
mutate(x=parse_number(x),
y=120-y)
#Plot Mews (not yet equal to datasaurus)
mews_borders %>%
filter(value==255) %>%
ggplot(aes(x,y))+geom_point()
# This is an awesome feature, but my drawings always looked terrible
final_mews <- draw_data(mews) %>% select(x,y)
mews <- mews_borders %>%
filter(value==255) %>%
select(x,y)
# This is an awesome feature, but my drawings always looked terrible
final_mews <- draw_data(mews) %>% select(x,y)
dino <- datasaurus %>% filter(dataset=="dino") %>% select(x,y)
final_mews %>% ggplot(aes(x,y))+geom_point()
cor(final_mews$x,final_mews$y)
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(final_mews),
N=50000,trim=2000)
metamer[[2000]] %>%
ggplot(aes(x,y))+geom_point()
metamer[[1500]] %>%
ggplot(aes(x,y))+geom_point()
metamer[[5]] %>%
ggplot(aes(x,y))+geom_point()
metamer[[2000]] %>%
ggplot(aes(x,y))+geom_point()
length(metamer)
cor(metamer[[length(metamer)]]$x,metamer[[length(metamer)]]$y)
cor(dino$x,dino$y)
mean(metamer[[length(metamer)]]$x)
mean(dino$x)
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews),mean_self_proximity),
N=50000,trim=2000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews),mean_self_proximity),
N=50000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews),mean_self_proximity()),
N=50000,trim=5000)
final_mews %>% ggplot(aes(x,y))+geom_point()
dino %>% ggplot(aes(x,y))+geom_point()
final_mews <- final_mews %>% mutate(x=100*x/max(x),y=100*y/(max(y))
final_mews <- final_mews %>% mutate(x=100*x/max(x),y=100*y/(max(y)))
View(final_mews)
final_mews <- final_mews %>% mutate(x=100*(x-min(x))/(max(x)-min(x)),y=100*(y-min(y))/(max(y)-min(y)))
View(final_mews)
final_mews %>% ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews),mean_self_proximity),
N=50000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews)),
N=50000,trim=5000)
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(final_mews),
N=50000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_self_proximity,mean_dist_to(final_mews),),
N=50000,trim=5000)
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_self_proximity,mean_dist_to(final_mews)),
N=50000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(final_mews),
N=100000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
mean(metamer[[length(metamer)]]$x)
mean(dino$x)
mean(metamer[[length(metamer)]]$y)
mean(dino$y)
sd(metamer[[length(metamer)]]$x)
sd(dino$x)
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(final_mews),
N=200000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamer <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = mean_dist_to(final_mews),
N=1000000,trim=5000)
metamer[[length(metamer)]] %>%
ggplot(aes(x,y))+geom_point()
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamers <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews),mean_self_proximity),
N=1000000,trim=100)
#This function uses simulated annealing to move points from the dino constellation
#towards mews, preserving mean, sd and cor.
metamers <- metamerize(data=dino,
preserve = delayed_with(mean(x), sd(x), mean(y), sd(y), cor(x, y)),
minimize = c(mean_dist_to(final_mews),mean_self_proximity),
N=1000000,trim=100)
metamers[[length(metamers)]] %>%
ggplot(aes(x,y))+geom_point()
